!function(){"use strict";function t(t,o){t.state("todos",{url:"/todos",templateUrl:"components/todo-list.html",controller:"TodoListController",controllerAs:"tlCntl",resolve:{todos:["TodoService",function(t){return t.getList()}]}}).state("todos.create",{url:"/create",templateUrl:"components/todo-editor.html",controller:"TodoEditorController",controllerAs:"teCntl",resolve:{todo:function(){return{$id:null,text:"",dueDate:null,creationDate:null,completed:!1}}}}).state("todos.edit",{url:"/:id/edit",templateUrl:"components/todo-editor.html",controller:"TodoEditorController",controllerAs:"teCntl",resolve:{todo:["TodoService","$stateParams",function(t,o){return t.getOne(o.id)}]}}),o.otherwise("/todos")}t.$inject=["$stateProvider","$urlRouterProvider"],angular.module("todoApp",["ui.router","todoApp.components","todoApp.services"]).config(t)}(),function(){"use strict";angular.module("todoApp.components",["ui.bootstrap"])}(),function(){"use strict";function t(t){t.setKeyPrefix("rhTodo")}t.$inject=["$localStorageProvider"],angular.module("todoApp.services",["ngStorage"]).config(t)}(),function(){"use strict";function t(t,o,e){var n=t;this.todo=angular.copy(t),this.isNew=null===t.$id,this.saveTodo=function(){this.isNew?(this.todo.creationDate=new Date,o.create(this.todo)):angular.extend(n,this.todo),e.go("todos")},this.cancel=function(){e.go("todos")},this.remove=function(){this.isNew||o.remove(this.todo),e.go("todos")},this.openDatePicker=function(){this.datePickerOpen=!0}}t.$inject=["todo","TodoService","$state"],angular.module("todoApp.components").controller("TodoEditorController",t)}(),function(){"use strict";function t(t,o,e,n,r){const i=this;this.todos=t,this.showCompleted=!1,this.clearTodos=function(){r.clear(),o.go("todos")},this.editTodo=function(t){o.go("todos.edit",{id:t.$id})},this.filterTodo=function(t){return i.showCompleted||!t.completed},this.isOverdue=function(t){if(t.dueDate){var o=new Date,e=new Date(t.dueDate);return o>e}return!1}}function o(){return function(t,o){var e=[];return angular.forEach(t,function(t){!o&&t.completed||e.push(t)}),e}}t.$inject=["todos","$state","$scope","$filter","TodoService"],angular.module("todoApp.components").controller("TodoListController",t).filter("todoListFilter",o)}(),function(){"use strict";function t(t){return new o(t)}function o(t){this.storage=t}t.$inject=["$localStorage"],angular.module("todoApp.services").factory("StorageService",t),o.prototype.get=function(t){return this.storage[t]},o.prototype.save=function(t,o){this.storage[t]=o},o.prototype.remove=function(t){delete this.storage[t]},o.prototype.clear=function(){this.storage.$reset()}}(),function(){"use strict";function t(t){return new o(t)}function o(t){this.$storage=t,this.$getAll()||this.$init()}t.$inject=["StorageService"],angular.module("todoApp.services").factory("TodoService",t),o.prototype.create=function(t){var o=this.$getAll(),e=o.push(t);t.$id=e-1},o.prototype.getList=function(){return this.$getAll()},o.prototype.getOne=function(t){return this.$getAll()[t]},o.prototype.remove=function(t){var o=t.$id,e=this.$getAll(),n=e.splice(o,1);n[0].$id=null;for(var r=o;r<e.length;r++)e[r].$id--,console.log("decremented todo id: "+e[r].$id)},o.prototype.clear=function(){this.$getAll().length=0},o.prototype.$getAll=function(){return this.$storage.get("todos")},o.prototype.$init=function(){this.$storage.save("todos",[])}}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
